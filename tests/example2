// This file is a part of the Classp parser, formatter, and AST generator. 
// Description: Used to generate skeleton-generator.h from the skeleton files. 
//  
// Copyright 2015 Google Inc. 
//  
// Licensed under the Apache License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//  
// http://www.apache.org/licenses/LICENSE-2.0 
//  
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions and 
// limitations under the License. 
 

class Expression {
  %parseable;
  syntax( '(' self ')' );
  sample('1+2', '(Sum val1:(IntegerLiteral val:1) val2:(IntegerLiteral val:2))');
  sample('1+2*(3+4)', '(Sum val1:(IntegerLiteral val:1) val2:(Product val1:(IntegerLiteral val:2) val2:(Sum val1:(IntegerLiteral val:3) val2:(IntegerLiteral val:4))))');
  sample('(1+2)+(3+4)', '(Sum val1:(Sum val1:(IntegerLiteral val:1) val2:(IntegerLiteral val:2)) val2:(Sum val1:(IntegerLiteral val:3) val2:(IntegerLiteral val:4)))');
}

class FunctionCall: Expression {
  identifier functionName;
  Expression argList[];
  syntax ( functionName '(' (argList*',') ')' );
}

class Sum: Expression {
  Expression val1;
  Expression val2;
  syntax (val1 '+' val2) %left 1;
}

class Product: Expression {
  Expression val1;
  Expression val2;
  syntax (val1 '*' val2) %left 2;
}

class IntegerLiteral: Expression {
  int val;
  syntax ( val );
}
